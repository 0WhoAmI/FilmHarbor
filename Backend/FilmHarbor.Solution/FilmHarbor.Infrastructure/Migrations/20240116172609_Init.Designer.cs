// <auto-generated />
using System;
using FilmHarbor.Infrastructure.DatabaseContext;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FilmHarbor.Infrastructure.Migrations
{
    [DbContext(typeof(FilmHarborDbContext))]
    [Migration("20240116172609_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FavouriteMovies", b =>
                {
                    b.Property<int>("FavouriteByUsersId")
                        .HasColumnType("int")
                        .HasColumnName("UserId");

                    b.Property<int>("FavouriteMoviesId")
                        .HasColumnType("int")
                        .HasColumnName("MovieId");

                    b.HasKey("FavouriteByUsersId", "FavouriteMoviesId");

                    b.HasIndex("FavouriteMoviesId");

                    b.ToTable("FavouriteMovies");
                });

            modelBuilder.Entity("FilmHarbor.Core.Entities.Category", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.ToTable("Categories");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Action"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Drama"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Comedy"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Sci-Fi"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Thriller"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Horror"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Romance"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Adventure"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Fantasy"
                        },
                        new
                        {
                            Id = 10,
                            Name = "Animation"
                        });
                });

            modelBuilder.Entity("FilmHarbor.Core.Entities.Movie", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("CategoryId")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("ImageUrl")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int?>("ReleaseYear")
                        .HasColumnType("int");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.ToTable("Movies");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            CategoryId = 1,
                            Description = "Opis filmu Incepcja",
                            ImageUrl = "https://example.com/inception.jpg",
                            ReleaseYear = 2010,
                            Title = "Incepcja"
                        },
                        new
                        {
                            Id = 2,
                            CategoryId = 2,
                            Description = "Opis filmu Forest Gump",
                            ImageUrl = "https://example.com/forestgump.jpg",
                            ReleaseYear = 1994,
                            Title = "Forest Gump"
                        },
                        new
                        {
                            Id = 3,
                            CategoryId = 1,
                            Description = "Opis filmu Szklana Pułapka",
                            ImageUrl = "https://example.com/diehard.jpg",
                            ReleaseYear = 1988,
                            Title = "Szklana Pułapka"
                        },
                        new
                        {
                            Id = 4,
                            CategoryId = 1,
                            Description = "Opis filmu Matrix",
                            ImageUrl = "https://example.com/matrix.jpg",
                            ReleaseYear = 1999,
                            Title = "Matrix"
                        },
                        new
                        {
                            Id = 5,
                            CategoryId = 3,
                            Description = "Opis filmu Nietykalni",
                            ImageUrl = "https://example.com/intouchables.jpg",
                            ReleaseYear = 2011,
                            Title = "Nietykalni"
                        },
                        new
                        {
                            Id = 6,
                            CategoryId = 2,
                            Description = "Opis filmu Labirynt Fauna",
                            ImageUrl = "https://example.com/pan.jpg",
                            ReleaseYear = 2006,
                            Title = "Labirynt Fauna"
                        },
                        new
                        {
                            Id = 7,
                            CategoryId = 1,
                            Description = "Opis filmu Gladiator",
                            ImageUrl = "https://example.com/gladiator.jpg",
                            ReleaseYear = 2000,
                            Title = "Gladiator"
                        },
                        new
                        {
                            Id = 8,
                            CategoryId = 2,
                            Description = "Opis filmu Szeregowiec Ryan",
                            ImageUrl = "https://example.com/savingprivateryan.jpg",
                            ReleaseYear = 1998,
                            Title = "Szeregowiec Ryan"
                        },
                        new
                        {
                            Id = 9,
                            CategoryId = 2,
                            Description = "Opis filmu Forrest Gump",
                            ImageUrl = "https://example.com/forrestgump.jpg",
                            ReleaseYear = 1994,
                            Title = "Forrest Gump"
                        },
                        new
                        {
                            Id = 10,
                            CategoryId = 1,
                            Description = "Opis filmu Interstellar",
                            ImageUrl = "https://example.com/interstellar.jpg",
                            ReleaseYear = 2014,
                            Title = "Interstellar"
                        });
                });

            modelBuilder.Entity("FilmHarbor.Core.Entities.Review", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Comment")
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int>("Rating")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MovieId");

                    b.HasIndex("UserId");

                    b.ToTable("Reviews");
                });

            modelBuilder.Entity("FilmHarbor.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("nvarchar(255)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FavouriteMovies", b =>
                {
                    b.HasOne("FilmHarbor.Core.Entities.User", null)
                        .WithMany()
                        .HasForeignKey("FavouriteByUsersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmHarbor.Core.Entities.Movie", null)
                        .WithMany()
                        .HasForeignKey("FavouriteMoviesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("FilmHarbor.Core.Entities.Movie", b =>
                {
                    b.HasOne("FilmHarbor.Core.Entities.Category", "Category")
                        .WithMany("Movies")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");
                });

            modelBuilder.Entity("FilmHarbor.Core.Entities.Review", b =>
                {
                    b.HasOne("FilmHarbor.Core.Entities.Movie", "Movie")
                        .WithMany("Reviews")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FilmHarbor.Core.Entities.User", "User")
                        .WithMany("Reviews")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FilmHarbor.Core.Entities.Category", b =>
                {
                    b.Navigation("Movies");
                });

            modelBuilder.Entity("FilmHarbor.Core.Entities.Movie", b =>
                {
                    b.Navigation("Reviews");
                });

            modelBuilder.Entity("FilmHarbor.Core.Entities.User", b =>
                {
                    b.Navigation("Reviews");
                });
#pragma warning restore 612, 618
        }
    }
}
